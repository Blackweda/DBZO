using UnityEngine;
using System.Collections;

public class AeroPlaneFlight : MonoBehaviour {
	
	/* Reference Links:
	
		https://www.youtube.com/watch?v=4Qq7d9elXNA
		https://docs.unity3d.com/ScriptReference/Transform-eulerAngles.html
		https://docs.unity3d.com/ScriptReference/Transform-forward.html
		
	*/	
	
	
	[SerializeField]
	private Rigidbody aeroplanebody;
	
	float rotationSpeed = 45;
    Vector3 currentEulerAngles;		
	Vector3 inputVector;
    float x;
    float y;
    float z;
	Camera cam;
	
	Transform target;

	// Use this for initialization
	void Start () {
		
		aeroplanebody = GetComponent<Rigidbody>();
		aeroplanebody.tag = "Player";
		cam = GameObject.Find("Aero_Camera").GetComponent<Camera>();
		cam.enabled = true;
	
	}
	
	// Update is called once per frame
	void Update () {
		
		/*
		Input.GetAxisRaw("Horizontal") = 1  : right direction button
		Input.GetAxisRaw("Horizontal") = -1 : left direction button
		
		Input.GetAxisRaw("Vertical")   = 1  : up direction button
		Input.GetAxisRaw("Vertical")   = -1 : down direction button		
		
		EULER
		----- 
		Y = -1 : spin left
		Y = 1  : spin right		
		X = -1 : bank down
		X =  1 : bank up		
		Z = -1 : bank right
		Z =  1 : bank left

		DIRECTIONAL
		-----------
		
		x = slide left or right
		y = ascend/descend
		z = go forward or backward
		*/
		
		
		// LEFT RIGHT KEYS TILT IN THAT DIRECTION
		if (Input.GetAxisRaw("Horizontal") == 1 && Input.GetAxisRaw("Vertical") == 0)
			z = -1;		
		if(Input.GetAxisRaw("Horizontal") == -1 && Input.GetAxisRaw("Vertical") == 0)
			z = 1;		
		if(Input.GetAxisRaw("Horizontal") == 0 && Input.GetAxisRaw("Vertical") == 0)
			z = 0;
		
		// UP DOWN KEYS TILT IN THAT DIRECTION
        if (Input.GetAxisRaw("Vertical") == 1 && Input.GetAxisRaw("Horizontal") == 0)
			x = 1;		
		if (Input.GetAxisRaw("Vertical") == -1 && Input.GetAxisRaw("Horizontal") == 0)
			x = -1;		
		if(Input.GetAxisRaw("Vertical") == 0 && Input.GetAxisRaw("Horizontal") == 0)
			x = 0;
		
		// LEFT RIGHT KEYS TILT IN THAT DIRECTION
		if (Input.GetAxisRaw("Horizontal") == 1 && Input.GetAxisRaw("Vertical") == -1)
			y = 1;		
		if(Input.GetAxisRaw("Horizontal") == -1 && Input.GetAxisRaw("Vertical") == -1)
			y = -1;		
		if(Input.GetAxisRaw("Horizontal") == 0 && Input.GetAxisRaw("Vertical") == 0)
			y = 0;
		
		
		
		
        //if (Input.GetKeyDown(KeyCode.Z)) z = 1 - z;

        //modifying the Vector3, based on input multiplied by speed and time
        currentEulerAngles += new Vector3(x, y, z) * Time.deltaTime * rotationSpeed;
		

        //apply the change to the gameObject
        transform.eulerAngles = currentEulerAngles;
		
		aeroplanebody.velocity = transform.forward * 2;
	
	}
}

/*

https://www.youtube.com/watch?v=fwAI84NMheU

var maxSpeed = 50.0;
var accelKey = "w";
var leftKey = "left";
var rightKey = "right";
var upKey = "up";
var downKey = "down";
var accel = 1.2;
var decel = 0.8;
var upDownSpeed = 20.0;
var turnSpeed = 20.0;
var speedToFly = 40.0;
var cam : GameObject;
var groundDetector : GameObject;
var explosion : GameObject;
private var curSpeed = 0.0;
private var curFall = 0.0;
private var isFalling = false;
static var isGrounded = true;

function Start () {

}

function Update () {
	if(isFalling  == false){
		if(Input.GetKeyDown(accelKey)){
			curSpeed ++;
		}
		if(Input.GetKey(accelKey)){
			curSpeed += accel * Time.deltaTime;
		}
	}
	else
	{
		curSpeed --;
	}
	if(Input.GetKey(accelKey)){
	}
	else{
		if(isGrounded == false){
			curSpeed -= decel * Time.deltaTime;
		}
		if(isGrounded == true){
			curSpeed -= (decel * 2) * Time.deltaTime;
		}
	}
	if(curSpeed > maxSpeed){
		curSpeed = maxSpeed;
	}
	if(curSpeed < 0){
		curSpeed = 0;
	}
	if(isGrounded == true){
		if(curSpeed < speedToFly){
			transform.rotation.x = 0;
			transform.rotation.z = 0;
			
		}
	}
	if(isGrounded == false){
		if(curSpeed < speedToFly){
			curFall += 9.8 * Time.deltaTime;
			transform.Translate(Vector3.down * curFall * Time.deltaTime);
			if(transform.position.y > 50){
				groundDetector.SetActive(false);
				isFalling = true;
			}
		}
	}
	transform.Translate(Vector3.forward * curSpeed * Time.deltaTime);
	if(Input.GetKey(upKey)){
		if(curSpeed >= speedToFly){
			transform.Rotate(Vector3.right * (-1 * upDownSpeed) * Time.deltaTime);
		}
	}
	if(Input.GetKey(leftKey)){
		transform.Rotate(Vector3.up * (-1 * turnSpeed) * Time.deltaTime);
	}
	if(Input.GetKey(rightKey)){
		transform.Rotate(Vector3.up * turnSpeed * Time.deltaTime);
	}
	if(Input.GetKey(downKey)){
		transform.Rotate(Vector3.right * turnSpeed * Time.deltaTime);
	}
	print(curSpeed);
}
function OnTriggerEnter(col : Collider){
	if(col.tag == "Terrain"){
		var cam1 : GameObject = Instantiate(cam, cam.transform.position, cam.transform.rotation);
		cam1.SetActive(true);
		var explo : GameObject = Instantiate(explosion, transform.position, transform.rotation);
		Destroy(groundDetector);
		Destroy(gameObject);
	}
}
How to use ZIP 
*/
